SimplifyStaticTest
---
Simplify
---
UnboxOfRandMaxIsEliminated
---
from __static__ import rand, RAND_MAX, box, int64
def test():
    x: int64 = rand() // int64(RAND_MAX)
    return box(x)
---
fun jittestmodule:test {
  bb 0 {
    v9:Nullptr = LoadConst<Nullptr>
    v10:CInt32 = CallStatic<static_rand@0xdeadbeef, 0>
    v11:CInt64 = IntConvert<CInt64> v10
    v12:MortalLongExact[2147483647] = LoadConst<MortalLongExact[2147483647]>
    v19:CInt64[2147483647] = LoadConst<CInt64[2147483647]>
    v20:CInt64[0] = LoadConst<CInt64[0]>
    v16:CInt64 = IntBinaryOp<FloorDivide> v11 v19
    v18:LongExact = PrimitiveBox<CInt64> v16 {
      FrameState {
        NextInstrOffset 22
        Locals<1> v16
      }
    }
    Return v18
  }
}
---
UnboxOfFinalIsEliminated
---
from typing import Final
from __static__ import int64, unbox

MY_FINAL: Final[int] = 111

def test() -> bool:
    i: int64 = 64
    if i < unbox(MY_FINAL):
        return True
    else:
        return False
---
fun jittestmodule:test {
  bb 0 {
    v8:Nullptr = LoadConst<Nullptr>
    v9:CInt64[64] = LoadConst<CInt64[64]>
    v11:ImmortalLongExact[111] = LoadConst<ImmortalLongExact[111]>
    v18:CInt64[111] = LoadConst<CInt64[111]>
    v19:CInt64[0] = LoadConst<CInt64[0]>
    v15:CBool = PrimitiveCompare<LessThan> v9 v18
    CondBranch<1, 2> v15
  }

  bb 1 (preds 0) {
    v16:ImmortalBool[True] = LoadConst<ImmortalBool[True]>
    Return v16
  }

  bb 2 (preds 0) {
    v17:ImmortalBool[False] = LoadConst<ImmortalBool[False]>
    Return v17
  }
}
---
UnboxOfFinalDoubleIsEliminated
---
from typing import Final
from __static__ import double, unbox

MY_FINAL: Final[float] = 1.23

def test() -> double:
    d: double = unbox(MY_FINAL)
    return d
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:MortalFloatExact[1.23] = LoadConst<MortalFloatExact[1.23]>
    v9:CDouble[1.23] = LoadConst<CDouble[1.23]>
    Return<CDouble> v9
  }
}
---
UnboxOfFinalUnsignedIsEliminated
---
from typing import Final
from __static__ import uint8, unbox

MY_FINAL: Final[int] = 42

def test() -> uint8:
    u: uint8 = unbox(MY_FINAL)
    return u
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:ImmortalLongExact[42] = LoadConst<ImmortalLongExact[42]>
    v10:CUInt8[42] = LoadConst<CUInt8[42]>
    v11:CInt64[0] = LoadConst<CInt64[0]>
    Return<CUInt8> v10
  }
}
---
UnboxOfFinalWithOverflowIsNotEliminated
---
from typing import Final
from __static__ import int8, unbox

MY_FINAL: Final[int] = 10000

def test() -> int8:
    i: int8 = unbox(MY_FINAL)
    return i
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:MortalLongExact[10000] = LoadConst<MortalLongExact[10000]>
    v7:CInt8 = PrimitiveUnbox<CInt8> v5
    v8:CInt64 = IsNegativeAndErrOccurred v7 {
      FrameState {
        NextInstrOffset 8
        Locals<1> v4
      }
    }
    Return<CInt8> v7
  }
}
---
CastOfKnownInexactTypeIsEliminated
---
from __static__ import cast

def test(x: int):
    return cast(int, x)
---
fun jittestmodule:test {
  bb 0 {
    v2:Long = LoadArg<0; "x", Long>
    Return v2
  }
}
---
CastOfKnownInexactOptionalTypeIsEliminated
---
from __static__ import cast
from typing import Optional

def test():
    return cast(Optional[int], None)
---
fun jittestmodule:test {
  bb 0 {
    v2:NoneType = LoadConst<NoneType>
    Return v2
  }
}
---
CastOfKnownExactTypeIsEliminated
---
from __static__ import cast

def test(x: bool):
    return cast(bool, x)
---
fun jittestmodule:test {
  bb 0 {
    v2:Bool = LoadArg<0; "x", Bool>
    Return v2
  }
}
---
CastOfUnknownExactTypeIsNotEliminated
---
from __static__ import cast

def test(x):
    return cast(bool, x)
---
fun jittestmodule:test {
  bb 0 {
    v2:Object = LoadArg<0; "x">
    v4:Bool = Cast<Exact[bool]> v2 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v2
      }
    }
    Return v4
  }
}
---
LoopDoesNotUseBoxedValue
---
def test(*x):
  for i in x:
   print(i)
---
fun jittestmodule:test {
  bb 0 {
    v15:TupleExact = LoadArg<0; "x", TupleExact>
    v16:Nullptr = LoadConst<Nullptr>
    v18:CInt64[0] = LoadConst<CInt64[0]>
    Branch<4>
  }

  bb 4 (preds 0, 2) {
    v24:CInt64 = Phi<0, 2> v18 v37
    v25:OptObject = Phi<0, 2> v16 v47
    v21:CInt32 = LoadEvalBreaker
    CondBranch<5, 1> v21
  }

  bb 5 (preds 4) {
    v26:CInt32 = RunPeriodicTasks {
      FrameState {
        NextInstrOffset 8
        Locals<3> v15 v24 v25
        Stack<1> v15
      }
    }
    Branch<1>
  }

  bb 1 (preds 4, 5) {
    v31:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v15
    v32:CBool = PrimitiveCompare<GreaterThan> v31 v24
    CondBranch<2, 3> v32
  }

  bb 2 (preds 1) {
    v34:LongExact = PrimitiveBox<CInt64> v24 {
      FrameState {
        NextInstrOffset 24
        Locals<3> v15 v24 v25
        Stack<2> v15 v15
      }
    }
    UseType<TupleExact> v15
    UseType<LongExact> v34
    v46:CInt64 = CheckSequenceBounds v15 v24 {
      FrameState {
        NextInstrOffset 26
        Locals<3> v15 v24 v25
        Stack<1> v15
      }
    }
    v47:Object = LoadArrayItem<Offset[24]> v15 v46 v15
    v36:CInt64[1] = LoadConst<CInt64[1]>
    v37:CInt64 = IntBinaryOp<Add> v24 v36
    v40:OptObject = LoadGlobalCached<0; "print">
    v41:MortalObjectUser[builtin_function_or_method:print:0xdeadbeef] = GuardIs<0xdeadbeef> v40 {
      Descr 'LOAD_GLOBAL: print'
    }
    v43:Object = VectorCall<1> v41 v47 {
      FrameState {
        NextInstrOffset 42
        Locals<3> v15 v37 v47
        Stack<1> v15
      }
    }
    Branch<4>
  }

  bb 3 (preds 1) {
    v44:NoneType = LoadConst<NoneType>
    Return v44
  }
}
---
UnboxBoxWithDifferentSizesNotOptimized
---
from __static__ import int8, int64, box, unbox

def test(x: int64) -> int8:
    y: int8 = unbox(box(x))
    return y
---
fun jittestmodule:test {
  bb 0 {
    v5:CInt64 = LoadArg<0; "x", CInt64>
    v6:Nullptr = LoadConst<Nullptr>
    v7:LongExact = PrimitiveBox<CInt64> v5 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v5 v6
      }
    }
    v9:CInt8 = PrimitiveUnbox<CInt8> v7
    v10:CInt64 = IsNegativeAndErrOccurred v9 {
      FrameState {
        NextInstrOffset 10
        Locals<2> v5 v6
      }
    }
    Return<CInt8> v9
  }
}
---
